name: Deploy Workflow

on:
  workflow_run:
    workflows: ["Versioning Workflow"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'  # Adjust to your Go version

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "version=${LATEST_TAG#v}" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Check if new release was created
        id: check_release
        run: |
          # Get the commit SHA from the versioning workflow
          VERSIONING_SHA="${{ github.event.workflow_run.head_sha }}"

          # Check if there are any new tags since the last workflow run
          NEW_TAGS=$(git tag --points-at $VERSIONING_SHA | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' || true)

          if [ -n "$NEW_TAGS" ]; then
            echo "new_release=true" >> $GITHUB_OUTPUT
            LATEST_NEW_TAG=$(echo "$NEW_TAGS" | sort -V | tail -n1)
            echo "release_tag=$LATEST_NEW_TAG" >> $GITHUB_OUTPUT
            echo "release_version=${LATEST_NEW_TAG#v}" >> $GITHUB_OUTPUT
            echo "New release detected: $LATEST_NEW_TAG"
          else
            echo "new_release=false" >> $GITHUB_OUTPUT
            echo "No new release detected"
          fi

      - name: Install dependencies
        if: steps.check_release.outputs.new_release == 'true'
        run: go mod download

      - name: Run tests
        if: steps.check_release.outputs.new_release == 'true'
        run: go test -v ./...

      - name: Build application
        if: steps.check_release.outputs.new_release == 'true'
        run: |
          VERSION="${{ steps.check_release.outputs.release_version }}"
          BINARY_NAME="nani"  # Replace with your actual binary name

          # Build for multiple platforms
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=$VERSION" -o dist/${BINARY_NAME}-linux-amd64 .
          GOOS=linux GOARCH=arm64 go build -ldflags "-X main.version=$VERSION" -o dist/${BINARY_NAME}-linux-arm64 .
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=$VERSION" -o dist/${BINARY_NAME}-darwin-amd64 .
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.version=$VERSION" -o dist/${BINARY_NAME}-darwin-arm64 .
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=$VERSION" -o dist/${BINARY_NAME}-windows-amd64.exe .

          # Make binaries executable
          chmod +x dist/${BINARY_NAME}-*

          # Create checksums
          cd dist
          sha256sum * > checksums.txt

      - name: Create GitHub Release
        if: steps.check_release.outputs.new_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.check_release.outputs.release_tag }}
          name: Release ${{ steps.check_release.outputs.release_tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify deployment success
        if: steps.check_release.outputs.new_release == 'true'
        run: |
          echo "✅ Successfully deployed ${{ steps.check_release.outputs.release_tag }}"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.check_release.outputs.release_tag }}"

      - name: Skip deployment
        if: steps.check_release.outputs.new_release == 'false'
        run: |
          echo "⏭️ No new release detected, skipping deployment"
